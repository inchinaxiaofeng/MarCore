package isa.loongarch

import chisel3._
import chisel3.util._

import defs._
import module.fu.ALUCtrl
import module.fu.LSUCtrl
import module.fu.BRUCtrl
import module.fu.BTBtype
import module.fu.MulUCtrl
import module.fu.DivUCtrl

object LA32R_ArithInstr extends HasLA32R_InstrType {
  def ADDW = BitPat("00_00000_00001_00000_?????_?????_?????")
  def SUBW = BitPat("00_00000_00001_00010_?????_?????_?????")
  def ADDIW = BitPat("00_00001_010??_?????_?????_?????_?????")
  def LU12IW = BitPat("00_01010_?????_?????_?????_?????_?????")
  def SLT = BitPat("00_00000_00001_00100_?????_?????_?????")
  def SLTU = BitPat("00_00000_00001_00101_?????_?????_?????")
  def SLTI = BitPat("00_00001_000??_?????_?????_?????_?????")
  def SLTUI = BitPat("00_00001_001??_?????_?????_?????_?????")
  def PCADDU12I = BitPat("00_01110_?????_?????_?????_?????_?????")
  def AND = BitPat("00_00000_00001_01001_?????_?????_?????")
  def OR = BitPat("00_00000_00001_01010_?????_?????_?????")
  def NOR = BitPat("00_00000_00001_01000_?????_?????_?????")
  def XOR = BitPat("00_00000_00001_01011_?????_?????_?????")
  def ANDI = BitPat("00_00001_110??_?????_?????_?????_?????")
  def ORI = BitPat("00_00001_110??_?????_?????_?????_?????")
  def XORI = BitPat("00_00001_111??_?????_?????_?????_?????")
  def MULW = BitPat("00_00000_00001_11000_?????_?????_?????")
  def MULHW = BitPat("00_00000_00001_11001_?????_?????_?????")
  def MULHWU = BitPat("00_00000_00001_11010_?????_?????_?????")
  def DIVW = BitPat("00_00000_00010_00000_?????_?????_?????")
  def DIVWU = BitPat("00_00000_00010_00010_?????_?????_?????")
  def MODW = BitPat("00_00000_00010_00001_?????_?????_?????")
  def MODWU = BitPat("00_00000_00010_00011_?????_?????_?????")

  val table = Array(
    ADDW -> List(DJK, FuType.alu, ALUCtrl.add),
    SUBW -> List(DJK, FuType.alu, ALUCtrl.sub),
    ADDIW -> List(DJSk12, FuType.alu, ALUCtrl.addw),
    LU12IW -> List(
      DSj20,
      FuType.alu,
      ALUCtrl.add
    ), // GR[rd] = SignExtend({si20, 12'b0}, GRLEN)
    SLT -> List(DJK, FuType.alu, ALUCtrl.slt),
    SLTU -> List(DJK, FuType.alu, ALUCtrl.sltu),
    SLTI -> List(DJSk12, FuType.alu, ALUCtrl.slt),
    SLTUI -> List(DJSk12, FuType.alu, ALUCtrl.sltu),
    PCADDU12I -> List(
      DSj20,
      FuType.alu,
      ALUCtrl.add
    ), // GR[rd] = PC + SignExtend({si20, 12'b0}, GRLEN)
    AND -> List(DJK, FuType.alu, ALUCtrl.and),
    OR -> List(DJK, FuType.alu, ALUCtrl.or),
    NOR -> List(DJK, FuType.alu, ALUCtrl.nor),
    XOR -> List(DJK, FuType.alu, ALUCtrl.xor),
    ANDI -> List(DJUk12, FuType.alu, ALUCtrl.and),
    ORI -> List(DJUk12, FuType.alu, ALUCtrl.or),
    XORI -> List(DJUk12, FuType.alu, ALUCtrl.xor),
//
    MULW -> List(DJK, FuType.mulu, MulUCtrl.mul),
    MULHW -> List(DJK, FuType.mulu, MulUCtrl.mulh),
    MULHWU -> List(DJK, FuType.mulu, MulUCtrl.mulhu),
//
    DIVW -> List(DJK, FuType.divu, DivUCtrl.divw),
    DIVWU -> List(DJK, FuType.divu, DivUCtrl.divuw),
    MODW -> List(DJK, FuType.divu, DivUCtrl.remw),
    MODWU -> List(DJK, FuType.divu, DivUCtrl.remuw)
  )
}

object LA32R_ShiftInstr extends HasLA32R_InstrType {
  def SLLW = BitPat("00_00000_00001_01110_?????_?????_?????")
  def SRLW = BitPat("00_00000_00001_01111_?????_?????_?????")
  def SRAW = BitPat("00_00000_00001_10000_?????_?????_?????")
  def SLLIW = BitPat("00_00000_00100_00001_?????_?????_?????")
  def SRLIW = BitPat("00_00000_00100_01001_?????_?????_?????")
  def SRAIW = BitPat("00_00000_00100_10001_?????_?????_?????")

  val table = Array(
    SLLW -> List(DJK, FuType.alu, ALUCtrl.sllw),
    SRLW -> List(DJK, FuType.alu, ALUCtrl.srlw),
    SRAW -> List(DJK, FuType.alu, ALUCtrl.sraw),
    SLLIW -> List(DJUk5, FuType.alu, ALUCtrl.sllw),
    SRLIW -> List(DJUk5, FuType.alu, ALUCtrl.srlw),
    SRAIW -> List(DJUk5, FuType.alu, ALUCtrl.sraw)
  )
}

object LA32R_JumpInstr extends HasLA32R_InstrType {
  def BEQ = BitPat("01_0110?_?????_?????_?????_?????_?????")
  def BNE = BitPat("01_0111?_?????_?????_?????_?????_?????")
  def BLT = BitPat("01_1000?_?????_?????_?????_?????_?????")
  def BGE = BitPat("01_1001?_?????_?????_?????_?????_?????")
  def BLTU = BitPat("01_1010?_?????_?????_?????_?????_?????")
  def BGEU = BitPat("01_1011?_?????_?????_?????_?????_?????")
  def B = BitPat("01_0100?_?????_?????_?????_?????_?????")
  def BL = BitPat("01_0101?_?????_?????_?????_?????_?????")
  def JIRL = BitPat("01_0011?_?????_?????_?????_?????_?????")

  val table = Array(
    BEQ -> List(DJSk16, FuType.bru, BRUCtrl.beq),
    BNE -> List(DJSk16, FuType.bru, BRUCtrl.bne),
    BLT -> List(DJSk16, FuType.bru, BRUCtrl.blt),
    BGE -> List(DJSk16, FuType.bru, BRUCtrl.bge),
    BLTU -> List(DJSk16, FuType.bru, BRUCtrl.bltu),
    BGEU -> List(DJSk16, FuType.bru, BRUCtrl.bgeu),
    B -> List(Sd10k16, FuType.bru, BRUCtrl.j), // RD Fixed to r1
    BL -> List(Sd10k16, FuType.bru, BRUCtrl.jal),
    JIRL -> List(DJSk16, FuType.bru, BRUCtrl.jalr)
  )

  val bruCtrl2BtbTypeTable = List(
    BRUCtrl.beq -> BTBtype.B,
    BRUCtrl.bne -> BTBtype.B,
    BRUCtrl.blt -> BTBtype.B,
    BRUCtrl.bge -> BTBtype.B,
    BRUCtrl.bltu -> BTBtype.B,
    BRUCtrl.bgeu -> BTBtype.B,
    BRUCtrl.j -> BTBtype.J,
    BRUCtrl.jal -> BTBtype.J,
    BRUCtrl.jalr -> BTBtype.I
  )
}

object LA32R_AccessInstr extends HasLA32R_InstrType {
  def LDB = BitPat("00_10100_000??_?????_?????_?????_?????")
  def LDH = BitPat("00_10100_001??_?????_?????_?????_?????")
  def LDW = BitPat("00_10100_010??_?????_?????_?????_?????")
  def LDBU = BitPat("00_10101_000??_?????_?????_?????_?????")
  def LDHU = BitPat("00_10101_001??_?????_?????_?????_?????")
  def STB = BitPat("00_10100_100??_?????_?????_?????_?????")
  def STH = BitPat("00_10100_101??_?????_?????_?????_?????")
  def STW = BitPat("00_10100_110??_?????_?????_?????_?????")
  def PRELD = BitPat("00_10101_011??_?????_?????_?????_?????")

  val table = Array(
    LDB -> List(DJSk12, FuType.lsu, LSUCtrl.lb),
    LDH -> List(DJSk12, FuType.lsu, LSUCtrl.lh),
    LDW -> List(DJSk12, FuType.lsu, LSUCtrl.lw),
    LDBU -> List(DJSk12, FuType.lsu, LSUCtrl.lbu),
    LDHU -> List(DJSk12, FuType.lsu, LSUCtrl.lhu),
    STB -> List(DJSk12, FuType.lsu, LSUCtrl.sb),
    STH -> List(DJSk12, FuType.lsu, LSUCtrl.sh),
    STW -> List(DJSk12, FuType.lsu, LSUCtrl.sw),
    PRELD -> List(JUd5Sk12, FuType.lsu, LSUCtrl.preld)
  )
}

//object LA32R_AtomInstr extends HasLA32R_InstrType {
//	def LLW			= BitPat("00_10000_0????_?????_?????_?????_?????")
//	def SCW			= BitPat("00_10000_1????_?????_?????_?????_?????")
//
//	val table	= Array (
//		LLW			-> List(Instr2RI14, FuType.)
//		SCW			-> List(Instr2RI14, FuType.)
//	)
//}

object LA32R_BarrierInstr extends HasLA32R_InstrType {
  // NOTE: 在顺序核中，这个东西不需要实现，因为顺序。这里只需要在指令类型中给定BAR，那么就打空泡就行了
  def DBAR = BitPat("00_11100_00111_00100_?????_?????_?????")
  def IBAR = BitPat("00_11100_00111_00101_?????_?????_?????")

  val table = Array(
    DBAR -> List(Ud15, FuType.lsu, LSUCtrl.preld), // Bobble
    IBAR -> List(Ud15, FuType.lsu, LSUCtrl.preld) // Bobble
  )
}

// object LA32R_OtherInstr extends HasLA32R_InstrType {
//   def SYSCALL = BitPat("00_00000_00010_10110_?????_?????_?????")
//   def BREAK = BitPat("00_00000_00010_10100_?????_?????_?????")
//   def RDCNTVLW = BitPat("00_00000_00000_00000_11000_00000_?????")
//   def RDCNTVHW = BitPat("00_00000_00000_00000_11001_00000_?????")
//   def RDCNTID = BitPat("00_00000_00000_00000_11000_?????_00000")
//
//   val table = Array(
//     SYSCALL -> List(),
//     BREAK -> List(),
//     RDCNTVLW -> List(),
//     RDCNTVHW -> List(),
//     RDCNTID -> List()
//   )
// }

object LA_Base extends HasMarCoreParameter {
  val table =
    LA32R_ArithInstr.table ++ LA32R_JumpInstr.table ++ LA32R_AccessInstr.table ++
      LA32R_BarrierInstr.table
}
