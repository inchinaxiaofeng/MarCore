package isa.loongarch
//
//import chisel3._
//import chisel3.util._
//
//import defs._
//import module.fu.ALUCtrl
//import module.fu.LSUCtrl
//import module.fu.MDUCtrl
//
//object LA32R_ArithInstr extends HasLA32R_InstrType {
//	def ADDW		= BitPat("00_00000_00001_00000_?????_?????_?????")
//	def SUBW		= BitPat("00_00000_00001_00010_?????_?????_?????")
//	def ADDIW		= BitPat("00_00001_010??_?????_?????_?????_?????")
//	def LU12IW		= BitPat("00_01010_?????_?????_?????_?????_?????")
//	def SLT			= BitPat("00_00000_00001_00100_?????_?????_?????")
//	def SLTU		= BitPat("00_00000_00001_00101_?????_?????_?????")
//	def SLTI		= BitPat("00_00001_000??_?????_?????_?????_?????")
//	def SLTUI		= BitPat("00_00001_001??_?????_?????_?????_?????")
//	def PCADDU12I		= BitPat("00_01110_?????_?????_?????_?????_?????")
//	def AND			= BitPat("00_00000_00001_01001_?????_?????_?????")
//	def OR			= BitPat("00_00000_00001_01010_?????_?????_?????")
//	def NOR			= BitPat("00_00000_00001_01000_?????_?????_?????")
//	def XOR			= BitPat("00_00000_00001_01011_?????_?????_?????")
//	def ANDI		= BitPat("00_00001_110??_?????_?????_?????_?????")
//	def ORI			= BitPat("00_00001_110??_?????_?????_?????_?????")
//	def XORI		= BitPat("00_00001_111??_?????_?????_?????_?????")
//	def MULW		= BitPat("00_00000_00001_11000_?????_?????_?????")
//	def MULHW		= BitPat("00_00000_00001_11001_?????_?????_?????")
//	def MULHWU		= BitPat("00_00000_00001_11010_?????_?????_?????")
//	def DIVW		= BitPat("00_00000_00010_00000_?????_?????_?????")
//	def DIVWU		= BitPat("00_00000_00010_00010_?????_?????_?????")
//	def MODW		= BitPat("00_00000_00010_00001_?????_?????_?????")
//	def MODWU		= BitPat("00_00000_00010_00011_?????_?????_?????")
//
//	val table	= Array (
//		ADDW		-> List(Instr3R		, FuType.alu, ALUCtrl.add  ),
//		SUBW		-> List(Instr3R		, FuType.alu, ALUCtrl.sub  ),
//		ADDIW		-> List(Instr2RI12	, FuType.alu, ALUCtrl.addw ),
//		LU12IW		-> List(Instr1RI20	, FuType.alu, ALUCtrl.add  ), // GR[rd] = SignExtend({si20, 12'b0}, GRLEN)
//		SLT		-> List(Instr3R		, FuType.alu, ALUCtrl.slt  ),
//		SLTU		-> List(Instr3R		, FuType.alu, ALUCtrl.sltu ),
//		SLTI		-> List(Instr2RI12	, FuType.alu, ALUCtrl.slt  ),
//		SLTUI		-> List(Instr2RI12	, FuType.alu, ALUCtrl.sltu ),
//		PCADDU12I	-> List(Instr1RI20	, FuType.alu, ALUCtrl.add  ), // GR[rd] = PC + SignExtend({si20, 12'b0}, GRLEN)
//		AND		-> List(Instr3R		, FuType.alu, ALUCtrl.and  ),
//		OR		-> List(Instr3R		, FuType.alu, ALUCtrl.or   ),
//		NOR		-> List(Instr3R		, FuType.alu, ALUCtrl.nor  ), // FIXME
//		XOR		-> List(Instr3R		, FuType.alu, ALUCtrl.xor  ),
//		ANDI		-> List(Instr2RI12	, FuType.alu, ALUCtrl.and  ),
//		ORI		-> List(Instr2RI12	, FuType.alu, ALUCtrl.or   ),
//		XORI		-> List(Instr2RI12	, FuType.alu, ALUCtrl.xor  ),
//		MULW		-> List(Instr3R		, FuType.mdu, MDUCtrl.mul  ),
//		MULHW		-> List(Instr3R		, FuType.mdu, MDUCtrl.mulh ),
//		MULHWU		-> List(Instr3R		, FuType.mdu, MDUCtrl.mulhu),
//		DIVW		-> List(Instr3R		, FuType.mdu, MDUCtrl.divw ),
//		DIVWU		-> List(Instr3R		, FuType.mdu, MDUCtrl.divuw),
//		MODW		-> List(Instr3R		, FuType.mdu, MDUCtrl.remw ),
//		MODWU		-> List(Instr3R		, FuType.mdu, MDUCtrl.remuw)
//	)
//}
//
//object LA32R_ShiftInstr extends HasLA32R_InstrType {
//	def SLLW		= BitPat("00_00000_00001_01110_?????_?????_?????")
//	def SRLW		= BitPat("00_00000_00001_01111_?????_?????_?????")
//	def SRAW		= BitPat("00_00000_00001_10000_?????_?????_?????")
//	def SLLIW		= BitPat("00_00000_00100_00001_?????_?????_?????")
//	def SRLIW		= BitPat("00_00000_00100_01001_?????_?????_?????")
//	def SRAIW		= BitPat("00_00000_00100_10001_?????_?????_?????")
//
//	val table	= Array (
//		SLLW		-> List(Instr3R		, FuType.alu, ALUCtrl.sllw ),
//		SRLW		-> List(Instr3R		, FuType.alu, ALUCtrl.srlw ),
//		SRAW		-> List(Instr3R		, FuType.alu, ALUCtrl.sraw ),
//		SLLIW		-> List(Instr2RI5	, FuType.alu, ALUCtrl.sllw ),
//		SRLIW		-> List(Instr2RI5	, FuType.alu, ALUCtrl.srlw ),
//		SRAIW		-> List(Instr2RI5	, FuType.alu, ALUCtrl.sraw )
//	)
//}
//
//object LA32R_JumpInstr extends HasLA32R_InstrType {
//	def BEQ			= BitPat("01_0110?_?????_?????_?????_?????_?????")
//	def BNE			= BitPat("01_0111?_?????_?????_?????_?????_?????")
//	def BLT			= BitPat("01_1000?_?????_?????_?????_?????_?????")
//	def BGE			= BitPat("01_1001?_?????_?????_?????_?????_?????")
//	def BLTU		= BitPat("01_1010?_?????_?????_?????_?????_?????")
//	def BGEU		= BitPat("01_1011?_?????_?????_?????_?????_?????")
//	def B			= BitPat("01_0100?_?????_?????_?????_?????_?????")
//	def BL			= BitPat("01_0101?_?????_?????_?????_?????_?????")
//	def JIRL		= BitPat("01_0011?_?????_?????_?????_?????_?????")
//
//	val table	= Array (
//		BEQ			-> List(Instr2RI16, FuType.bru, ALUCtrl.beq ),
//		BNE			-> List(Instr2RI16, FuType.bru, ALUCtrl.bne ),
//		BLT			-> List(Instr2RI16, FuType.bru, ALUCtrl.blt ),
//		BGE			-> List(Instr2RI16, FuType.bru, ALUCtrl.bge ),
//		BLTU		-> List(Instr2RI16, FuType.bru, ALUCtrl.bltu),
//		BGEU		-> List(Instr2RI16, FuType.bru, ALUCtrl.bgeu),
//		B			-> List(InstrI26  , FuType.bru, ALUCtrl.jalr), // RD Fixed to r1
//		BL			-> List(InstrI26  , FuType.bru, ALUCtrl.jal ),
//		JIRL		-> List(Instr2RI16, FuType.bru, ALUCtrl.jalr)
//	)
//}
//
//object LA32R_AccessInstr extends HasLA32R_InstrType {
//	def LDB			= BitPat("00_10100_000??_?????_?????_?????_?????")
//	def LDH			= BitPat("00_10100_001??_?????_?????_?????_?????")
//	def LDW			= BitPat("00_10100_010??_?????_?????_?????_?????")
//	def LDBU		= BitPat("00_10101_000??_?????_?????_?????_?????")
//	def LDHU		= BitPat("00_10101_001??_?????_?????_?????_?????")
//	def STB			= BitPat("00_10100_100??_?????_?????_?????_?????")
//	def STH			= BitPat("00_10100_101??_?????_?????_?????_?????")
//	def STW			= BitPat("00_10100_110??_?????_?????_?????_?????")
//	def PRELD		= BitPat("00_10101_011??_?????_?????_?????_?????")
//
//	val table	= Array (
//		LDB		-> List(Instr2RI12 , FuType.lsu, LSUCtrl.lb ),
//		LDH		-> List(Instr2RI12 , FuType.lsu, LSUCtrl.lh ),
//		LDW		-> List(Instr2RI12 , FuType.lsu, LSUCtrl.lw ),
//		LDBU		-> List(Instr2RI12 , FuType.lsu, LSUCtrl.lbu),
//		LDHU		-> List(Instr2RI12 , FuType.lsu, LSUCtrl.lhu),
//		STB		-> List(Instr2RI12S, FuType.lsu, LSUCtrl.sb ),
//		STH		-> List(Instr2RI12S, FuType.lsu, LSUCtrl.sh ),
//		STW		-> List(Instr2RI12S, FuType.lsu, LSUCtrl.sw ),
//		PRELD		-> List(InstrPreld , FuType.lsu, LSUCtrl.preld) // FIXME: maybe
//	)
//}
//
////object LA32R_AtomInstr extends HasLA32R_InstrType {
////	def LLW			= BitPat("00_10000_0????_?????_?????_?????_?????")
////	def SCW			= BitPat("00_10000_1????_?????_?????_?????_?????")
////
////	val table	= Array (
////		LLW			-> List(Instr2RI14, FuType.)
////		SCW			-> List(Instr2RI14, FuType.)
////	)
////}
//
//object LA32R_BarrierInstr extends HasLA32R_InstrType {
//  // NOTE: 在顺序核中，这个东西不需要实现，因为顺序。这里只需要在指令类型中给定BAR，那么就打空泡就行了
//	def DBAR		= BitPat("00_11100_00111_00100_?????_?????_?????")
//	def IBAR		= BitPat("00_11100_00111_00101_?????_?????_?????")
//
//	val table	= Array (
//		DBAR		-> List(DBAR, FuType.lsu, LSUCtrl.preld), // Bobble
//		IBAR		-> List(IBAR, FuType.lsu, LSUCtrl.preld) // Bobble
//	)
//}
//
////object LA32R_OtherInstr extends HasLA32R_InstrType {
////	def SYSCALL		= BitPat("00_00000_00010_10110_?????_?????_?????")
////	def BREAK		= BitPat("00_00000_00010_10100_?????_?????_?????")
////	def RDCNTVLW	= BitPat("00_00000_00000_00000_11000_00000_?????")
////	def RDCNTVHW	= BitPat("00_00000_00000_00000_11001_00000_?????")
////	def RDCNTID		= BitPat("00_00000_00000_00000_11000_?????_00000")
////
////	val table	= Array (
////		SYSCALL		-> List(Instr)
////		BREAK		-> List()
////		RDCNTVLW	-> List()
////		RDCNTVHW	-> List()
////		RDCNTID		-> List()
////	)
////}
//
//object LA_Base extends HasMarCoreParameter {
//	val table = LA32R_ArithInstr.table ++ LA32R_JumpInstr.table ++ LA32R_AccessInstr.table ++
//		LA32R_BarrierInstr.table
//}
