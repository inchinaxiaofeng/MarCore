package isa.mips

import chisel3._
import chisel3.util._

import defs._
import module.fu.ALUCtrl
import module.fu.BRUCtrl
import module.fu.LSUCtrl
import module.fu.BTBtype
import module.fu.MulUCtrl

object MIPS32_ArithInstr extends HasMIPS_InstrType {
  def ADD = BitPat("b000000_?????_?????_?????_00000_100000")
  def ADDU = BitPat("b000000_?????_?????_?????_00000_100001")
  def SUB = BitPat("b000000_?????_?????_?????_00000_100010")
  def MUL = BitPat("b011100_?????_?????_?????_00000_000010")
  def ADDI = BitPat("b001000_?????_?????_????????????????")
  def ADDIU = BitPat("b001001_?????_?????_????????????????")
  def SLT = BitPat("b000000_?????_?????_?????_00000_101010")

  val table = Array(
    ADD -> List(InstrR, FuType.alu, ALUCtrl.add),
    ADDU -> List(InstrR, FuType.alu, ALUCtrl.addu),
    SUB -> List(InstrR, FuType.alu, ALUCtrl.sub),
    MUL -> List(InstrR, FuType.mulu, MulUCtrl.mul),
    ADDI -> List(InstrI, FuType.alu, ALUCtrl.add),
    ADDIU -> List(InstrI, FuType.alu, ALUCtrl.addu),
    SLT -> List(InstrR, FuType.alu, ALUCtrl.slt)
  )
}

// FIXME
object MIPS32_BJInstr extends HasMIPS_InstrType { // Need Different BRU
  def BEQ = BitPat("b000100_?????_?????_????????????????")
  def BNE = BitPat("b000101_?????_?????_????????????????")
  def BLTZ = BitPat("b000001_?????_00000_????????????????") // < 0
  def BGEZ = BitPat("b000001_?????_00001_????????????????") // >= 0
  def BLEZ = BitPat("b000110_?????_00000_????????????????") // <= 0
  def BGTZ = BitPat("b000111_?????_00000_????????????????") // > 0
  def J = BitPat("b000010_??????????????????????????")
  def JAL = BitPat("b000011_??????????????????????????")
  def JALR = BitPat("b000000_?????_00000_?????_?????_001001")
  def JR = BitPat("b000000_?????_00000_00000_?????_001000")

  val table = Array(
    BEQ -> List(InstrI, FuType.bru, BRUCtrl.beq),
    BNE -> List(InstrI, FuType.bru, BRUCtrl.bne),
    BLEZ -> List(InstrI, FuType.bru, BRUCtrl.ble),
    BLTZ -> List(InstrI, FuType.bru, BRUCtrl.blt),
    BGEZ -> List(InstrI, FuType.bru, BRUCtrl.bge),
    BGTZ -> List(InstrI, FuType.bru, BRUCtrl.bgt),
    // I
    // I+1: PC = Cat(PC(GPRLEN-1, 28),index, 0.U(2.W))
    J -> List(InstrJ, FuType.bru, BRUCtrl.j),
    // I: $31 = PC + 8
    // I+1: PC = Cat(PC(GPRLEN-1, 28),index, 0.U(2.W))
    JAL -> List(InstrJ, FuType.bru, BRUCtrl.jal),
    // I: tmp = $rs, $rd = PC + 8
    // I+1: PC = tmp
    JALR -> List(InstrR, FuType.bru, BRUCtrl.jalr),
    // I: tmp = $rs
    // I+1: PC = tmp
    JR -> List(InstrR, FuType.bru, BRUCtrl.jr)
  )

  val bruCtrl2BtbTypeTable = List(
    BRUCtrl.beq -> BTBtype.B,
    BRUCtrl.bne -> BTBtype.B,
    BRUCtrl.ble -> BTBtype.B,
    BRUCtrl.bge -> BTBtype.B,
    BRUCtrl.bgt -> BTBtype.B,
    BRUCtrl.blt -> BTBtype.B,
    BRUCtrl.j -> BTBtype.J,
    BRUCtrl.jal -> BTBtype.J,
    BRUCtrl.jalr -> BTBtype.J,
    BRUCtrl.jr -> BTBtype.I
  )
}

object MIPS32_LSInstr extends HasMIPS_InstrType {
  def LB = BitPat("b100000_?????_?????_????????????????")
  def LW = BitPat("b100011_?????_?????_????????????????")
  def SB = BitPat("b101000_?????_?????_????????????????")
  def SW = BitPat("b101011_?????_?????_????????????????")

  val table = Array(
    LB -> List(InstrI, FuType.lsu, LSUCtrl.lb),
    LW -> List(InstrI, FuType.lsu, LSUCtrl.lw),
    SB -> List(InstrI, FuType.lsu, LSUCtrl.sb),
    SW -> List(InstrI, FuType.lsu, LSUCtrl.sw)
  )
}

object MIPS32_ShiftInstr extends HasMIPS_InstrType {
  def SLL = BitPat("b000000_00000_?????_?????_?????_000000")
  def SRL = BitPat("b000000_00000_?????_?????_?????_000010")
  def SRA = BitPat("b000000_00000_?????_?????_?????_000011")
  def SLLV = BitPat("b000000_?????_?????_?????_00000_000100")
  def SRLV = BitPat("b000000_?????_?????_?????_00000_000110")
  def SRAV = BitPat("b000000_?????_?????_?????_00000_000111")

  val table = Array(
    SLL -> List(InstrR, FuType.alu, ALUCtrl.sll),
    SRL -> List(InstrR, FuType.alu, ALUCtrl.srl),
    SRA -> List(InstrR, FuType.alu, ALUCtrl.sra),
    SLLV -> List(InstrR, FuType.alu, ALUCtrl.sll),
    SRLV -> List(InstrR, FuType.alu, ALUCtrl.srl),
    SRAV -> List(InstrR, FuType.alu, ALUCtrl.sra)
  )
}

object MIPS32_LogicInstr extends HasMIPS_InstrType {
  def AND = BitPat("b000000_?????_?????_?????_00000_100100")
  def OR = BitPat("b000000_?????_?????_?????_00000_100101")
  def XOR = BitPat("b000000_?????_?????_?????_00000_100110")
  def ANDI = BitPat("b001100_?????_?????_??????????????")
  def ORI = BitPat("b001101_?????_?????_??????????????")
  def XORI = BitPat("b001110_?????_?????_??????????????")
  def LUI = BitPat("b001111_00000_?????_??????????????")

  val table = Array(
    AND -> List(InstrR, FuType.alu, ALUCtrl.and),
    OR -> List(InstrR, FuType.alu, ALUCtrl.or),
    XOR -> List(InstrR, FuType.alu, ALUCtrl.xor),
    ANDI -> List(InstrI, FuType.alu, ALUCtrl.and),
    ORI -> List(InstrI, FuType.alu, ALUCtrl.or),
    XORI -> List(InstrI, FuType.alu, ALUCtrl.xor),
    LUI -> List(InstrI, FuType.alu, ALUCtrl.add)
  )
}

object MIPSInstrC3 extends HasMarCoreParameter {
  val table =
    MIPS32_ArithInstr.table ++ MIPS32_LogicInstr.table ++ MIPS32_ShiftInstr.table ++
      MIPS32_LSInstr.table ++ MIPS32_BJInstr.table
}
